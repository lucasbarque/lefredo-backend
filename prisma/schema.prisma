// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String?
  active          Boolean   @default(true)
  token           String?
  tokenExpiration DateTime?
  expoToken       String?
  role            Role      @default(ADMIN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?

  @@map("users")
}

model Restaurant {
  id   String @id @default(uuid())
  name String

  User User[]
  Menu Menu[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("restaurants")
}

model Menu {
  id    String @id @default(uuid())
  title String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String

  Sections Section[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menus")
}

model Section {
  id          String  @id @default(uuid())
  title       String
  description String?

  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String

  Dish Dish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sections")
}

model Dish {
  id          String  @id @default(uuid())
  title       String
  description String?
  price       Int

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String

  dishSpecs   DishSpecsDishes[]
  dishExtras  DishExtras[]
  dishFlavors DishFlavors[]

  portion  String?
  prepTime Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dishes")
}

model DishFlavors {
  id          String  @id @default(uuid())
  title       String
  label       String
  description String?

  Dish   Dish?   @relation(fields: [dishId], references: [id])
  dishId String?

  @@map("dish_flavors")
}

model DishExtras {
  id    String @id @default(uuid())
  title String
  price Int

  Dish   Dish?   @relation(fields: [dishId], references: [id])
  dishId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dish_extras")
}

model DishSpecs {
  id    String @id @default(uuid())
  title String
  key   String

  dishSpecs DishSpecsDishes[]

  @@map("dish_specs")
}

model DishSpecsDishes {
  DishSpecs   DishSpecs? @relation(fields: [dishSpecsId], references: [id])
  dishSpecsId String
  Dish        Dish?      @relation(fields: [dishId], references: [id])
  dishId      String

  @@id([dishId, dishSpecsId])
  @@map("dishes_specs_dish")
}

model Media {
  id    String @id @default(uuid())
  title String
  type  String

  referenceId   String
  referenceName String
  filename      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medias")
}
